# Copyright 2024 Mist Tecnologia LTDA. All rights reserved.
# Copyright 2016 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//build/config/clang/clang.gni")
import("//build/config/clang/crash_diagnostics.gni")
import("//build/config/clang/stack_size_section.gni")
import("//build/config/clang/time_trace.gni")
import("//build/config/compiler.gni")
import("//build/config/cxx_version.gni")
import("//build/config/enable_frame_pointers.gni")
import("//build/config/linker.gni")
import("//build/config/lto/config.gni")
import("//build/toolchain/ccache.gni")
import("//build/toolchain/concurrent_jobs.gni")
import("//build/toolchain/toolchain_environment.gni")
import("//build/toolchain/variant.gni")

declare_args() {
  # Controls whether to promote warnings to errors.
  deny_warnings = true
}

# No frame pointers for host compiles.
if (current_toolchain == host_toolchain) {
  enable_frame_pointers = false
}

if (kernel_toolchain != false) {
  import("//build/config/kernel/levels.gni")
  enable_frame_pointers = mk_assert_level > 0
}

config("language") {
  cflags_c = [ "-std=c11" ]
  cflags_cc = [ "-std=c++$cxx_version" ]
  defines = []

  if (cxx_version < 20) {
    # TODO(https://fxbug.dev/42064981): libc++ now marks the C++20
    # synchronization primitives as deprecated in older C++ standards which
    # affects Fuchsia since we use these primitives across the codebase. We
    # temporarily suppress these warnings until C++20 becomes the default.
    defines += [ "_LIBCPP_DISABLE_DEPRECATION_WARNINGS" ]
  }

  if (current_os == "mac") {
    # macOS needs this to not complain about C++17isms that older macOS
    # system libc++ doesn't support.  But we use our own toolchain's static
    # libc++ anyway.
    cflags_cc += [ "-faligned-allocation" ]

    # libc++ headers mark some symbols as unavailable on macOS by default
    # because the system libc++ doesn't support them.  But we use our own
    # toolchain's static libc++ anyway.
    defines += [ "_LIBCPP_DISABLE_AVAILABILITY" ]
  }

  # Pass the same C/C++ flags to the Objective-C/C++ compiler.
  cflags_objc = cflags_c
  cflags_objcc = cflags_cc
}

config("color_diagnostics") {
  # GCC correctly defaults this from the terminal, so leave it alone.
  if (!is_gcc) {
    cflags = [ "-fcolor-diagnostics" ]
    asmflags = cflags
    ldflags = cflags

    # The macOS linker does not support `--color-diagnostics`.
    if (current_os != "mac") {
      ldflags += [ "-Wl,--color-diagnostics" ]
    }
  }
}

config("crash_diagnostics") {
  if (!is_gcc) {
    cflags = [
      "-fcrash-diagnostics-dir=" +
          rebase_path(crash_diagnostics_dir, root_build_dir),
      "-fcrash-diagnostics=all",
    ]
    if (clang_enable_error_reproducers) {
      cflags += [ "-gen-reproducer=error" ]
    }
    ldflags = cflags
    asmflags = cflags
  }
}

config("stack-size-section") {
  if (!is_gcc && stack_size_section) {
    cflags = [ "-fstack-size-section" ]
    asmflags = cflags
    ldflags = cflags
  }
}

config("time-trace") {
  if (!is_gcc && time_trace) {
    cflags = [ "-ftime-trace" ]
    asmflags = cflags
    ldflags = cflags
  }
}

config("compiler") {
  cflags = []
  cflags_cc = [ "-fvisibility-inlines-hidden" ]
  cflags_objcc = [ "-fvisibility-inlines-hidden" ]
  configs = [
    ":color_diagnostics",
    ":crash_diagnostics",
    ":time-trace",
    ":toolchain_version_stamp",
    ":stack-size-section",
  ]

  # TODO(https://fxbug.dev/322984857): Only add this config for is_gcc configs
  # after we roll a toolchain with default TLSDESC for Fuchsia targets, at
  # which point it can be moved into clang_defaults.
  configs += [ ":default-tls-dialect" ]

  if (!is_gcc) {
    configs += [
      ":clang_defaults",
      ":embed_bitcode",
      ":ffp_contract",
    ]
  }

  if (current_os == "fuchsia" || current_os == "mistos") {
    configs += [ "//build/config/fuchsia:compiler" ]
  } else {
    if (current_os == "linux") {
      configs += [ "//build/config/linux:compiler" ]
    } else if (current_os == "mac") {
      configs += [ "//build/config/mac:compiler" ]
    } else if (current_cpu == "wasm32" && current_os == "unknown") {
      configs += [ "//build/config/wasm:compiler" ]
    }
  }

  asmflags = cflags
}

config("cpu_baseline") {
  if (current_cpu != "wasm32") {
    configs = [ "//build/config/$current_cpu" ]
  }
}

# These flags are enabled by default in Fuchsia's Clang toolchain, but we set
# them explicitly to support other Clang toolchains and Clang-based tools.
config("clang_defaults") {
  # Set relax relocations flag only for x64 ELF targets.
  if (current_cpu == "x64" && is_elf) {
    asmflags = [ "-Wa,--mrelax-relocations=yes" ]
  }
  if (current_os == "linux") {
    cflags_cc = [ "-stdlib=libc++" ]
    ldflags = [
      "-stdlib=libc++",

      "--start-no-unused-arguments",
      "-unwindlib=libunwind",
      "-rtlib=compiler-rt",
      "--end-no-unused-arguments",
    ]
  }
}

config("embed_bitcode") {
  if (clang_embed_bitcode) {
    cflags = [
      "-Xclang",
      "-fembed-bitcode=all",
    ]
  }
}

# -ffast-math enables 4 sets of optimizations:
#     no-math-errno, no-rounding-math, unsafe-math-optimizations, finite-math-only
# This config sets the first 3. Use one of the subsequent configs to disable/enable the last one.
config("fast-math-baseline") {
  cflags = [
    "-fno-math-errno",
    "-fno-rounding-math",

    # Enables six targeted optimizations: approx-func, associative-math,
    # reciprocal-math, no-signed-zeros, no-trapping-math and fp-contract=fast
    "-funsafe-math-optimizations",

    # -ffinite-math-only is set (or cleared) elsewhere.
  ]
}

# Disables finite-math-only, but sets all other fast-math optimizations.
# Allow inf/nan to be used (while avoiding UB), with the other float-based optimizations.
config("fast-math") {
  configs = [ ":fast-math-baseline" ]
  cflags = [
    "-fno-finite-math-only",  # Implies honor-infinities and honor-nans.
  ]
}

# Enables finite-math-only, along with all other fast-math optimizations.
# To be used when inf/nan are guaranteed to NOT be encountered.
config("fast-math-no-inf-nan") {
  configs = [ ":fast-math-baseline" ]
  cflags = [
    "-ffinite-math-only",  # Implies no-honor-infinities and no-honor-nans.
  ]
}

config("ffp_contract") {
  # TODO(https://fxbug.dev/42169939): This was the default for -ffp-model=precise until
  # LLVM revision f04e387055e495e3e14570087d68e93593cf2918 when Clang switched
  # to -ffp-contract=on.
  cflags = [ "-ffp-contract=off" ]
  asmflags = cflags
}

# We want to force a recompile and relink of the world whenever our toolchain
# changes since artifacts from an older version of the toolchain may or may not
# be compatible with newer ones.
#
# To achieve this, we insert an unused flag in the compile line.
config("toolchain_version_stamp") {
  if (clang_prefix == default_clang_prefix) {
    clang_version = read_file(
            "//prebuilt/third_party/clang/${host_platform}/.versions/clang.cipd_version",
            "json")
    defines = [ "TOOLCHAIN_VERSION=${clang_version.instance_id}" ]
  }
}

config("relative_paths") {
  if (is_gcc) {
    # Relativize paths without leaking the build output directory in debug info.
    # Note: with multiple prefix map options, the mappings are checked in
    # reverse-order, and *stops* after the first match is applied.
    # Thus, longest prefix matches should be near the tail of this list.
    cflags = [
      # Map "/some/dir/fuchsia" to "../..".
      "-ffile-prefix-map=" + rebase_path("//") + "=" +
          rebase_path("//", root_build_dir),

      # Map "/some/dir/fuchsia/out" to "..".
      "-ffile-prefix-map=" + rebase_path("$root_build_dir/..") + "=..",

      # Map "/some/dir/fuchsia/out/my-build.my-arch" to ".".
      "-ffile-prefix-map=" + rebase_path(root_build_dir) + "=.",
    ]
  } else {
    # Make builds independent of the absolute file path. -ffile-prefix-map= can
    # be used to the same effect, but it requires putting the absolute path to
    # the build directory in the compile command, thus making it dependent on
    # the absolute path of build directory. -ffile-compilation-dir is designed
    # to address this issue, making both debug info and coverage mapping
    # independent of the absolute path of the build directory.
    cflags = [ "-ffile-compilation-dir=." ]
  }

  # This makes sure that include directories in the toolchain are represented
  # as relative to the build directory (because that's how we invoke the
  # compiler), rather than absolute.  This can affect __FILE__ expansions
  # (e.g. assertions in system headers).  We normally run a compiler that's
  # someplace within the source tree, so its absolute installation path will
  # have a prefix matching `absolute_path` and hence be mapped to
  # `relative_path` in the debugging information, so this should actually be
  # superfluous for purposes of the debugging information.
  cflags += [ "-no-canonical-prefixes" ]

  asmflags = cflags
  ldflags = cflags
}

config("debug") {
}

config("release") {
  defines = [ "NDEBUG=1" ]
}

config("exceptions") {
  cflags_cc = [ "-fexceptions" ]
  cflags_objcc = cflags_cc
  ldflags = cflags_cc
}

config("no_exceptions") {
  cflags_cc = [ "-fno-exceptions" ]
  cflags_objcc = cflags_cc
  ldflags = cflags_cc
}

config("rtti") {
  cflags_cc = [ "-frtti" ]
  cflags_objcc = cflags_cc
  ldflags = cflags_cc
}

config("no_rtti") {
  cflags_cc = [ "-fno-rtti" ]

  if (is_kernel && is_mk && !is_gcc) {
    cflags_cc += [
      # Remove the unused rtti component from vtables.
      "-Xclang",
      "-fexperimental-omit-vtable-rtti",
    ]
  }

  cflags_objcc = cflags_cc
  ldflags = cflags_cc
}

config("default_include_dirs") {
  include_dirs = [
    "//",
    root_gen_dir,
  ]
}

variant("linker_gc") {
  configs = [ ":linker_gc.compiler" ]

  # These are the link-time flags to take advantage of the code generation
  # flags in config("linker_gc.compiler").
  if (current_os == "mac") {
    ldflags = [ "-Wl,-dead_strip" ]
  } else if (current_os == "win") {
    ldflags = [ "-Wl,/opt:ref" ]
  } else {
    ldflags = [ "-Wl,--gc-sections" ]
  }
}

# These are the code-generation flags.
config("linker_gc.compiler") {
  cflags = [
    "-fdata-sections",
    "-ffunction-sections",
  ]

  # Just to be safe, pass them to the linker too.
  ldflags = cflags
}

config("default_linker_gc") {
  configs = [ ":linker_gc" ]
}

config("linker_string_merging") {
  if (current_os == "win") {
    ldflags = [ "-Wl,/opt:lldtailmerge" ]
  } else if (current_os != "mac") {
    ldflags = [ "-Wl,-O2" ]
  }
}

# Each optimize_$optimize config below corresponds to a single setting that's
# controlled by the optimize argument. The default_optimize level is set to
# optimize_$optimize for convenience, but individual targets can override their
# optimization level by remove default_optimize and manually applying one of
# the configs below.

config("optimize_none") {
  cflags = [ "-O0" ]
  ldflags = cflags
  rustflags = [ "-Copt-level=0" ]
}

config("optimize_debug") {
  cflags = [ "-Og" ]
  ldflags = cflags

  # Rust doesn't recognize opt level "g", the closest is "1".
  # See: https://doc.rust-lang.org/rustc/codegen-options/index.html#opt-level
  rustflags = [ "-Copt-level=1" ]
}

config("optimize_minimal") {
  cflags = [ "-O1" ]
  ldflags = cflags
  rustflags = [ "-Copt-level=1" ]
}

config("optimize_moderate") {
  cflags = [ "-O2" ]
  ldflags = cflags
  rustflags = [ "-Copt-level=2" ]
}

config("optimize_size") {
  # GCC doesn't have -Oz
  if (!is_gcc && use_oz) {
    cflags = [ "-Oz" ]
  } else {
    # TODO(https://fxbug.dev/42165168): We would ideally be using -Oz by default but that
    # currently frequently results in binaries that are larger than -Oz.
    cflags = [ "-Os" ]
  }
  ldflags = cflags

  if (clang_ml_inliner) {
    cflags += [
      # `release` uses AOT model embedded inside the compiler.
      "-mllvm",
      "-enable-ml-inliner=release",
    ]
  }

  if (use_oz) {
    rustflags = [ "-Copt-level=z" ]
  } else {
    # TODO(https://fxbug.dev/42165168): We would ideally be using -Oz by default but that
    # currently frequently results in binaries that are larger than -Oz.
    rustflags = [ "-Copt-level=s" ]
  }

  configs = [ ":linker_string_merging" ]
}

config("optimize_size_lto") {
  if (kernel_toolchain != false) {
    configs = [ ":optimize_moderate" ]
  } else {
    # Primarily optimize for size.
    configs = [ ":optimize_size" ]
  }

  _is_not_instrumented = toolchain_variant.tags + [ "instrumented" ] -
                         [ "instrumented" ] == toolchain_variant.tags

  not_needed([ "_is_not_instrumented" ])

  # Enable LTO for Fuchsia targets.
  # Do not enable LTO for the kernel.
  # Do not enable LTO for the instrumented variants.
  # Do not enable LTO (here) for the lto or thinlto variants.
  if (is_mk && toolchain_environment != "kernel" && _is_not_instrumented &&
      !is_lto_variant) {
    # Enable LTO for the binaries that are generated by Clang.
    configs += [ "//build/config/lto:lto-clang" ]
  }
}

config("optimize_speed") {
  cflags = [ "-O3" ]
  ldflags = cflags
  rustflags = [ "-Copt-level=3" ]
  configs = [ ":linker_string_merging" ]
}

config("optimize_sanitizer") {
  # Instrumentation adds overhead that is greatly improved by optimization.
  # -O1 is well-tested with the instrumentation modes and does not degrade the
  # comprehensibility of backtraces produced by sanitizer failures.
  cflags = [ "-O1" ]
  ldflags = cflags
  rustflags = [ "-Copt-level=1" ]
}

config("optimize_profile") {
  if (kernel_toolchain != false) {
    # For mk artifacts, this must always enable optimizations
    # to ensure userboot.so is compiled with -O2
    # See https://fxbug.dev/42146384 for more context.
    configs = [ ":optimize_moderate" ]
  } else {
    cflags = [ "-O1" ]
    ldflags = cflags
    rustflags = [ "-Copt-level=1" ]
  }
}

config("optimize_coverage") {
  if (kernel_toolchain != false) {
    # For mk artifacts, this must always enable optimizations
    # to ensure userboot.so is compiled with -O2
    # See https://fxbug.dev/42146384 for more context.
    configs = [ ":optimize_moderate" ]
  } else {
    cflags = [ "-O1" ]
    ldflags = cflags
    rustflags = [ "-Copt-level=1" ]
  }
}

config("default_optimize") {
  configs = [ ":optimize_${optimize}" ]
}

# Each of the debuginfo_$debuginfo configs below corresponds to a single setting
# that controls the amount of debugging information used and is controlled by
# the debuginfo argument. The default_debuginfo level is set to
# debuginfo_$debuginfo for convenience, but individual targets can override
# their debuginfo level by manually applying one of the configs below.

config("debuginfo_none") {
  cflags = [ "-g0" ]
  if (current_os != "win") {
    asmflags = cflags
  }
  ldflags = cflags
  rustflags = [ "-Cdebuginfo=0" ]
}

config("debuginfo_backtrace") {
  cflags = [ "-g1" ]
  if (current_os != "win") {
    asmflags = cflags
  }
  ldflags = cflags
  rustflags = [ "-Cdebuginfo=1" ]
}

config("debuginfo_debug") {
  cflags = [
    "-g3",

    # Add command-line details to each TU's DW_AT_producer to aid build
    # diagnosis working backwards from debug files.  Clang aliases this switch
    # to -grecord-command-line, but both compilers accept this spelling for it.
    "-grecord-gcc-switches",
  ]
  if (current_os != "win") {
    asmflags = cflags
  }
  ldflags = cflags
  rustflags = [ "-Cdebuginfo=2" ]
}

config("dwarf_version") {
  cflags = [ "-gdwarf-${dwarf_version}" ]
  asmflags = cflags
  ldflags = cflags
}

config("compress_debuginfo") {
  if (compress_debuginfo != "none") {
    gz_flag = "-gz=${compress_debuginfo}"
    cflags = [ gz_flag ]
    asmflags = cflags
    ldflags = cflags
  }
}

config("default_debuginfo") {
  cflags = []
  ldflags = []
  configs = [ ":debuginfo_${debuginfo}" ]
  if (current_os != "win" && current_cpu != "wasm32") {
    configs += [
      ":dwarf_version",
      ":compress_debuginfo",
    ]
    if (!is_gcc) {
      # This option forces Clang to only emit class type information when
      # constructors are emitted which can significantly reduce debug info
      # size. Eventually, this option will enabled by default in Clang when
      # -fno-standalone-debug is used.
      cflags += [
        "-Xclang",
        "-debug-info-kind=constructor",
      ]
    }
  } else if (debuginfo != "none" && current_os == "win") {
    # TODO(https://fxbug.dev/42132853): This produces the .pdb file, but it doesn't seem
    # to get the DWARF data out of the main output file.
    ldflags += [ "-Wl,/debug:full" ]
  }
}

config("default_frame_pointers") {
  if (enable_frame_pointers) {
    configs = [ ":frame_pointers" ]
  } else {
    configs = [ ":no_frame_pointers" ]
  }
}

variant("frame_pointers") {
  cflags = [
    "-fno-omit-frame-pointer",
    "-momit-leaf-frame-pointer",
  ]
  ldflags = cflags
  rustflags = [ "-Cforce-frame-pointers" ]
  if (kernel_toolchain != false) {
    defines = [ "WITH_FRAME_POINTERS=1" ]
  }
}

variant("no_frame_pointers") {
  cflags = [ "-fomit-frame-pointer" ]
  ldflags = cflags

  # rustc automatically does this for release builds, and there's no way to
  # force it for non-release.
  if (kernel_toolchain != false) {
    defines = [ "WITH_FRAME_POINTERS=0" ]
  }
}

config("suppress_iterator_warnings") {
  defines = [ "_LIBCPP_DISABLE_DEPRECATION_WARNINGS" ]
  visibility = [
    "//third_party/flatbuffers/*",
    "//third_party/grpc/*",
  ]
}

config("default_warnings") {
  cflags = [
    "-Wall",
    "-Wextra",
    "-Wconversion",
    "-Wextra-semi",
    "-Wimplicit-fallthrough",
    "-Wnewline-eof",
    "-Wstrict-prototypes",
    "-Wwrite-strings",
    "-Wno-sign-conversion",
    "-Wno-unused-parameter",
    "-Wnonportable-system-include-path",
  ]

  # TODO(https://fxbug.dev/42142861): Disable "-Wmissing-field-initializers"
  # which warns when designated initializers are used on some (but not all)
  # fields in C++, but not C.
  #
  # There is ongoing discussion about whether it should apply to C++ or not.
  # See https://gcc.gnu.org/bugzilla/show_bug.cgi?id=96868 for details.
  cflags += [ "-Wno-missing-field-initializers" ]

  # These -W... switches only exist in Clang, so are disabled only there.
  if (!is_gcc) {
    cflags += [
      # TODO(https://fxbug.dev/324268041): Disable "-Wextra-qualification"
      # which warns when an extra qualifier appears on a member.
      "-Wno-extra-qualification",

      # TODO(https://fxbug.dev/330769701): Disable "-Wcast-fuction-type-strict"
      # and "-Wcast-function-type-mismatch"  which enforce an exact type match
      # between a function pointer and the target function.
      "-Wno-cast-function-type-strict",
      "-Wno-cast-function-type-mismatch",
      "-Wno-unknown-warning-option",

      # TODO(https://fxbug.dev/344080745): After the issue is fixed,
      # remove "-Wno-missing-template-arg-list-after-template-kw".
      "-Wno-missing-template-arg-list-after-template-kw",
    ]
  }

  cflags_cc = []
  if (cxx_version >= 20) {
    cflags_cc += [
      # TODO(https://fxbug.dev/42073532): The use of implicit capture of this via [=] has
      # been deprecated in C++20, but we cannot address this because adding an
      # explicit capture of 'this' to capture '*this' by reference is a C++20
      # extension and not valid in C++17.
      "-Wno-deprecated-this-capture",
    ]
  }

  if (is_gcc) {
    # GCC is pedantic about which flags apply to which language.
    cflags -= [
      "-Wstrict-prototypes",
      "-Wextra-semi",
    ]
    cflags_c = [ "-Wstrict-prototypes" ]
    cflags_cc += [ "-Wextra-semi" ]

    # GCC doesn't support these flags
    cflags -= [
      "-Wnewline-eof",
      "-Wnonportable-system-include-path",
    ]

    cflags += [
      # This warns about compatibility with ancient binaries, not relevant.
      "-Wno-psabi",

      # TODO(https://fxbug.dev/42052174): -Warray-bounds has false positives in GCC 12.
      # When https://gcc.gnu.org/bugzilla/show_bug.cgi?id=105762 is fixed,
      # remove this.
      "-Wno-array-bounds",

      # gcc will never catch anything that clang will not with this warning.
      # Moreover, most folks don't build with gcc. We just disable this
      # warning on gcc to make it easier to see actual errors.
      "-Wno-deprecated-declarations",

      # TODO(https://fxbug.dev/351904809): -Wstringop-overread has false
      # positives in GCC 13, and -Wstringop-overflow does in GCC 14.
      # Needs to be pursued upstream.
      "-Wno-stringop-overread",
      "-Wno-stringop-overflow",

      # TODO(https://fxbug.dev/351904809): -Wmaybe-uninitialized has at least
      # one false positive in GCC 14 that was not obvious how to work around
      # locally.  Needs to be pursued upstream.
      "-Wno-maybe-uninitialized",

      # TODO(https://fxbug.dev/362618077): Spuriously fires.
      "-Wno-alloc-size-larger-than",
    ]
  }

  configs = [
    # TODO(https://fxbug.dev/331282813): Disable "-Wdeprecated-pragma" which
    # warns for deprecated std::errc constants.
    ":Wno-deprecated-pragma",

    # TODO(https://fxbug.dev/376323001): Disable "-Wnontrivial-memaccess" until
    # all instances are fixed.
    ":Wno-nontrivial-memaccess",
  ]
}

# Code that goes into the SDK or otherwise contributes to the SDK surface area
# in source form will be compiled in many different environments. As such, we
# should compile it with stricter warnings in fuchsia.git.
config("sdk_extra_warnings") {
  cflags_cc = [
    "-Wnon-virtual-dtor",
    "-Wshadow",
    "-Wctad-maybe-unsupported",
  ]
}

# Same as `sdk_extra_warnings`, but intended to be added to the configuration of
# test targets that exercise SDK headers, to verify that the public headers of
# SDK libraries build under a stricter set of warnings.
config("test_exercising_sdk_headers") {
  configs = [ ":sdk_extra_warnings" ]
}

# TODO(https://fxbug.dev/42136088): clean up instances of this outside of third party code.
config("Wno-unused-function") {
  cflags = [ "-Wno-unused-function" ]
  visibility = []
}

config("Wno-strict-prototypes") {
  cflags = [ "-Wno-strict-prototypes" ]
}

config("Wno-undef") {
  cflags = [ "-Wno-undef" ]
  visibility = []
}

config("Wno-bitfield-conversion") {
  cflags = [ "-Wno-bitfield-conversion" ]
  visibility = []
}

# TODO(https://fxbug.dev/42085293): Remove the use of variable length arrays.
#
# NOTE: Do not add this to public_configs under any circumstances. Public
# configs are viral and will infect unsuspecting targets.

config("Wno-vla-cxx-extension") {
  if (!is_gcc) {
    cflags_cc = [ "-Wno-vla-cxx-extension" ]
  }
  visibility = []
}

# TODO(https://fxbug.dev/353575163): Remove this when instances have been resolved.
config("Wno-gnu-folding-constant") {
  cflags = [ "-Wno-gnu-folding-constant" ]
}

# TODO(https://fxbug.dev/42136089): clean up instances of this outside of third party code.
#
# NOTE: Do not add this to public_configs under any circumstances. Public
# configs are viral and will infect unsuspecting targets.
config("Wno-conversion") {
  cflags = [ "-Wno-conversion" ]

  # Don't enable extra ubsan checks that will cite issues for the same code
  # that -Wconversion would complain about.  If the code's not warning-clean,
  # then it's not likely to avoid implicit truncation behavior at runtime.
  # (The casts that would prevent the warnings also prevent these checks
  # firing, since an explicit cast counts as an explicit intended truncation.)
  #configs = [ "//src/lib/ubsan-custom:allow-implicit-integer-truncation" ]

  # To trim this list:
  # $ scripts/gn/trim_visibility.py --target="//build/config:Wno-conversion"
  visibility = []
}

config("Wno-extra-semi") {
  cflags = [ "-Wno-extra-semi" ]
}

config("Wno-implicit-fallthrough") {
  cflags = [ "-Wno-implicit-fallthrough" ]
  visibility = []
}

# Config to suppress Wno-unused-but-set-parameter warning in the third party code
# that doesn't comply with.
config("Wno-unused-but-set-parameter") {
  cflags = [ "-Wno-unused-but-set-parameter" ]
  visibility = []
}

# Config to suppress Wunused-but-set-variable warning in the third party code
# that doesn't comply with.
config("Wno-unused-but-set-variable") {
  cflags = [ "-Wno-unused-but-set-variable" ]
  visibility = []
}

# Config to suppress Wbitwise-instead-of-logical warning in the third party code
# that doesn't comply with.
config("Wno-bitwise-instead-of-logical") {
  cflags = [ "-Wno-bitwise-instead-of-logical" ]
  visibility = []
}

config("Wno-defaulted-function-deleted") {
  cflags = [ "-Wno-defaulted-function-deleted" ]
  visibility = []
}

config("Wno-missing-prototypes") {
  cflags_c = [ "-Wno-missing-prototypes" ]
  visibility = []
}

config("Wno-missing-declarations") {
  visibility = []

  cflags = [ "-Wno-missing-declarations" ]
}

config("Wno-deprecated-anon-enum-enum-conversion") {
  cflags = [ "-Wno-deprecated-anon-enum-enum-conversion" ]
  visibility = []
}

config("Wno-newline-eof") {
  cflags = [ "-Wno-newline-eof" ]
  visibility = []
}

config("symbol_visibility_hidden") {
  # Disable libc++ visibility annotations to make sure that the compiler option
  # has effect on symbols defined in libc++ headers. Note that we don't want to
  # disable these annotations altogether to ensure that our toolchain is usable
  # outside of our build since not every user uses hidden visibility by default.
  defines = [ "_LIBCPP_DISABLE_VISIBILITY_ANNOTATIONS" ]
  cflags = [ "-fvisibility=hidden" ]
  if (kernel_toolchain != false) {
    cflags_cc = [ "-fvisibility-inlines-hidden" ]
  }
}

config("symbol_no_undefined") {
  if (current_os == "mac") {
    ldflags = [ "-Wl,-undefined,error" ]
  } else {
    ldflags = [ "-Wl,--no-undefined" ]
  }
}

config("shared_library_config") {
  if (current_os == "mk") {
    configs = [ "//build/config/mk:shared_library_config" ]
  } else if (current_os == "linux") {
    cflags = [ "-fPIC" ]
  } else if (current_os == "mac") {
    configs = [ "//build/config/mac:mac_dynamic_flags" ]
  }
}

config("executable_config") {
  configs = []

  if (current_os == "mk") {
    configs += [ "//build/config/mk:executable_config" ]
  } else if (current_os == "mac") {
    configs += [
      "//build/config/mac:mac_dynamic_flags",
      "//build/config/mac:mac_executable_flags",
    ]
  }
}

config("default_libs") {
  configs = []

  if (current_os == "mac") {
    configs += [ "//build/config/mac:default_libs" ]
  }
}

config("werror") {
  if (!use_ccache) {
    cflags = [
      "-Werror",
      # Do not add -Wno-error= options to this config.
    ]

    asmflags = [ "-Wa,--fatal-warnings" ]
    cflags += asmflags

    if (current_os == "win") {
      ldflags = [ "-Wl,/WX" ]
    }

    # New versions of C++ often include new deprecations, so treat them as
    # warnings by default.
    if (experimental_cxx_version != false ||
        # TODO(https://fxbug.dev/327227416): Remove after addressing
        # Xcode-specific deprecation warnings.
        is_mac) {
      cflags += [ "-Wno-error=deprecated-declarations" ]
    }
  }
}

config("no-template-backtrace-limit") {
  cflags_cc = [ "-ftemplate-backtrace-limit=0" ]
}

config("no-stack-protector") {
  cflags = [ "-fno-stack-protector" ]
}

variant("no-safe-stack") {
  if (!is_gcc) {
    cflags = [ "-fno-sanitize=safe-stack" ]
  }
}

config("no-shadow-call-stack") {
  if ((current_cpu == "arm64" || current_cpu == "riscv64") && !is_gcc) {
    cflags = [ "-fno-sanitize=shadow-call-stack" ]
  }
}

variant("no-compiler-abi") {
  configs = [
    ":no-safe-stack",
    ":no-shadow-call-stack",
    ":no-stack-protector",
  ]

  if (!is_gcc) {
    ldflags = [
      # Make sure libc++ is not linked in.  Header-only use is OK.
      "-nostdlib++",
    ]
  }
}

config("no_profile") {
  # The difference between this config and removing //build/config/profile is
  # the dynamic linker setting which is necessary for it to use at runtime with
  # the libraries it was linked against.
  cflags = [
    "-fno-profile-instr-generate",
    "-fno-coverage-mapping",
  ]
}

config("icf") {
  # This changes C/C++ semantics and might be incompatible with third-party
  # code that relies on function pointers comparison.
  if (current_os == "win" && (linker == "lld" || !is_gcc)) {
    ldflags = [ "-Wl,/opt:icf=all" ]
  } else if (linker == "gold" || linker == "lld") {
    ldflags = [ "-Wl,--icf=all" ]
  }
}

# "_ALL_SOURCE" is used by some system headers to expose more features (say in fcntl.h) beyond those
# strictly defined in standard.
config("all_source") {
  defines = [ "_ALL_SOURCE" ]
}

config("auto_var_init") {
  if (!is_gcc) {
    # Automatically initialize variables with a pattern.
    cflags = [ "-ftrivial-auto-var-init=pattern" ]
  }
}

config("thread_safety_annotations") {
  if (!is_gcc) {
    cflags = [
      "-Wthread-safety",

      # TODO(https://fxbug.dev/42085252): Clang is catching instances of these in the kernel and drivers.
      # Temporarily disable them for now to facilitate the roll then come back and
      # fix them.
      "-Wno-unknown-warning-option",
      "-Wno-thread-safety-reference-return",
    ]
    defines = [ "_LIBCPP_ENABLE_THREAD_SAFETY_ANNOTATIONS=1" ]
  }
}

config("zero-call-used-regs") {
  # TODO(fxrev.dev/710262): Enable on arm64 when there's performance data.
  if (current_cpu == "x64") {
    cflags = [ "-fzero-call-used-regs=used-gpr" ]
    defines = [ "ZERO_CALL_USED_REGS" ]
  }
}

# libc++ removed a number of transitive includes between version 14 and 15
# but those were later re-added and conditionally gated on a new define in
# https://reviews.llvm.org/D128661. In Fuchsia, we have already done the
# cleanup so we can remove these transitive includes unconditionally to
# avoid regressions.
#
# Note: This is going to become the default in future libc++ versions.
config("libcpp_remove_transitive_includes") {
  defines = [ "_LIBCPP_REMOVE_TRANSITIVE_INCLUDES" ]
}

# Infinite loops are undefined behavior in C++ and thus can be optimized away
# by the compiler. This config inhibits that optimization.
config("no-finite-loops") {
  cflags = [ "-fno-finite-loops" ]
}

if (current_toolchain == default_toolchain) {
  import("//build/toolchain/default_concurrent_jobs.gni")

  # Tools that must be executed locally.
  pool("local") {
    depth = default_concurrent_jobs.local
  }

  # For actions that consume exceptionally large amounts of memory.
  # The largest LTO link actions may fall into this category.
  # See https://fxbug.dev/42062387 for context.
  pool("highmem") {
    depth = 1
  }
}

tlsdesc = {
  if (current_cpu == "arm64") {
    enable_dialect = "desc"
    disable_dialect = "traditional"
    have_tlsdesc = 1

    # On arm64 TLSDESC is opt-in or opt-out via -mtls-dialect=... under GCC, but is always enabled for Clang.
    can_enable = is_gcc
    can_disable = is_gcc
    compiler_default = !is_gcc
  } else if (current_cpu == "riscv64") {
    enable_dialect = "desc"
    disable_dialect = "trad"
    have_tlsdesc = !is_gcc

    # On riscv64 TLSDESC is opt-in or opt-out via -mtls-dialect=... under Clang, but is not currently supported in GCC.
    can_enable = !is_gcc
    can_disable = !is_gcc
    compiler_default = false
  } else if (current_cpu == "x64") {
    enable_dialect = "gnu2"
    disable_dialect = "gnu"
    have_tlsdesc = 1

    can_enable = true
    can_disable = true
    compiler_default = false
  } else if (current_cpu == "arm") {
    enable_dialect = "gnu2"
    disable_dialect = "gnu"
    have_tlsdesc = 1

    # On arm64 TLSDESC is opt-in or opt-out via -mtls-dialect=... under GCC, but is always enabled for Clang.
    can_enable = is_gcc
    can_disable = is_gcc
    compiler_default = true
  }
}

config("default-tls-dialect") {
  if (is_mk && !tlsdesc.compiler_default) {
    assert(tlsdesc.can_enable)
    cflags = [ "-mtls-dialect=${tlsdesc.enable_dialect}" ]
    ldflags = cflags
  }
}

config("tlsdesc") {
  have_tlsdesc = tlsdesc.have_tlsdesc
  if (tlsdesc.can_enable) {
    cflags = [ "-mtls-dialect=${tlsdesc.enable_dialect}" ]
    ldflags = cflags
    have_tlsdesc = 1
  }
  defines = [
    "WANT_TLSDESC=1",
    "HAVE_TLSDESC=$have_tlsdesc",
  ]
}

config("no-tlsdesc") {
  have_tlsdesc = tlsdesc.have_tlsdesc
  if (tlsdesc.can_disable) {
    cflags = [ "-mtls-dialect=${tlsdesc.disable_dialect}" ]
    ldflags = cflags
    have_tlsdesc = 0
  }
  defines = [
    "WANT_TLSDESC=0",
    "HAVE_TLSDESC=$have_tlsdesc",
  ]
}

# TODO(https://fxbug.dev/331282813): Disable "-Wdeprecated-pragma" which
# warns for deprecated std::errc constants.
config("Wno-deprecated-pragma") {
  if (!is_gcc) {
    cflags = [ "-Wno-deprecated-pragma" ]
  }
}

# TODO(https://fxbug.dev/376323001): Disable "-Wnontrivial-memaccess" until
# all instances are fixed.
config("Wno-nontrivial-memaccess") {
  if (!is_gcc) {
    cflags = [ "-Wno-nontrivial-memaccess" ]
  }
}

config("Wsystem-headers") {
  cflags = [ "-Wsystem-headers" ]
}

# Adding this config directly to a linking target ensures that any deps on
# ifs_shared_library() `.as-needed` targets don't bring link stubs into the
# link.  This should be used for a relocatable link, along with a metadata
# collection across ifs_shared_library_ldscript as an input linker script.
config("ifs-as-needed") {
  #lib_dirs = [ ifs_shared_library_as_needed_dir ]
}

group("test_executable_deps") {
  deps = []

  # Symbolizer markup is currently only supported on Linux hosts.
  #
  # TODO(https://fxbug.dev/319148300): Determine if we can make this just
  # `is_linux`. The other uses we have for non-host Linux toolchains are
  # probably places where markup makes sense, but that can be for later
  # consideration.
  if (is_host && is_linux) {
    deps += [ "//build/config/sanitizers:sanitizers_use_symbolizer_markup" ]
  }
}

config("crel") {
  # TODO(drewry) arm doesn't like this so far.
  if (is_elf && !is_gcc && current_cpu != "arm") {
    cflags = [ "-Wa,--crel,--allow-experimental-crel" ]
    asmflags = cflags
  }
}

# This should be used by executables that avoid the normal libc dependencies.
# These must also omit toolchain-provided instrumentation runtimes that will
# themselves depend on libc.
config("standalone") {
  configs = [ "//build/config/kernel:nolibc" ]

  ldflags = []
  if (!is_gcc) {
    # The sanitizer runtimes need libc ABIs that aren't provided here.
    ldflags += [ "-fno-sanitize-link-runtime" ]

    # The standard profiling runtime can't be used in standalone contexts.  The
    # instrumentation works fine to collect data, and //src/lib/llvm-profdata
    # can be used to wire up a custom runtime if possible in context.
    ldflags += [ "-noprofilelib" ]

    # Make sure the unwinder isn't implicitly brought in for any reason.
    ldflags += [ "-unwindlib=none" ]
  }
}
