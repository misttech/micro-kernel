# Copyright 2017 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//build/config/clang/clang.gni")
import("//build/config/clang/clang_target_toolchain_info.gni")
import("//build/config/sanitizers/sanitizer_default_options.gni")
import("//build/toolchain/toolchain_environment.gni")
import("//build/toolchain/variant.gni")

_prebuilt_runtime = toolchain_variant.tags + [ "standalone" ] -
                    [ "standalone" ] == toolchain_variant.tags

config("variant-libprefix") {
  visibility = [ ":*" ]
  if (is_fuchsia && _prebuilt_runtime) {
    dynamic_linker_flags =
        "-dynamic-linker=${toolchain_variant.libprefix}ld.so.1"
    ldflags = [ "-Wl,$dynamic_linker_flags" ]
    rustflags = [ "-Clink-arg=$dynamic_linker_flags" ]
  }
}

template("sanitizer_rustflags") {
  # For dynamic linking (Fuchsia and macOS), there is just one combined DSO.
  # For static linking (other platforms), there are separate libraries for the
  # generic (C) and C++-specific runtime support.
  _shared_runtime = defined(invoker.shared_runtime) && invoker.shared_runtime
  if (_shared_runtime) {
    needed_libs = [ "clang_rt" ]
  } else {
    needed_libs = [
      "clang_rt",
      "clang_rt_cxx",
    ]
  }

  if (defined(invoker.variant)) {
    _variant = invoker.variant
  } else {
    _variant = target_name
  }

  config(target_name) {
    visibility = [ ":*" ]
    rustflags = []

    # LINT.IfChange
    _toolchain_info_variants = clang_target_toolchain_info.variants

    # Not all Clang targets support all variants. E.g.
    # x86_64-pc-windows-msvc only supports "none"
    if (defined(_toolchain_info_variants[_variant])) {
      _toolchain_info_variant = _toolchain_info_variants[_variant]

      if (_shared_runtime) {
        _toolchain_info_variant_libs = _toolchain_info_variant.shared
      } else {
        _toolchain_info_variant_libs = _toolchain_info_variant.static
      }

      foreach(lib, needed_libs) {
        libclang_rt_lib_name = _toolchain_info_variant_libs[lib]
        if (libclang_rt_lib_name != "") {
          rustflags +=
              [ "-Clink-arg=${rebased_clang_dir}/${libclang_rt_lib_name}" ]
        }
      }

      # Expose the presence of sanitizers as a compile-time condition.
      # This allows conditional compilation of code for this variant,
      # for instance in order to disable a specific test case.
      # TODO(https://fxbug.dev/42168338): use cfg_sanitize instead.
      rustflags += [ "--cfg=feature=\"variant_${invoker.variant}\"" ]
    } else {
      not_needed([
                   "_toolchain_info_variants",
                   "needed_libs",
                 ])
    }

    # LINT.ThenChange(//build/config/clang/generate_config_json.py)
  }
}

variant("asan") {
  common_flags = [ "-fsanitize=address" ]
  cflags = [
    # See https://fxbug.dev/42144902 and
    # https://github.com/google/sanitizers/issues/1017.
    "-mllvm",
    "-asan-use-private-alias=1",

    # -fsanitize-address-use-odr-indicator (the default) adds default visibility
    # symbols to check at runtime if any symbols have been interposed upon,
    # meaning there were multiple definitions of a symbol at runtime. We don't
    # want ASan to change the abi by introducing new symbols. Moreover, having
    # the same symbol defined in multiple shared objects is well defined.
    "-fno-sanitize-address-use-odr-indicator",
  ]

  configs = [
    ":variant-libprefix",
    ":asan.rustflags",
  ]

  # ASan wants frame pointers because it captures stack traces
  # on allocations and such, not just on errors.
  configs += [ "//build/config:frame_pointers" ]

  if (is_kernel) {
    configs += [ "//zircon/kernel/lib/instrumentation/asan:kasan" ]
  }

  executable_deps = [ ":asan_default_options" ]
}

sanitizer_rustflags("asan.rustflags") {
  variant = "asan"
  shared_runtime = is_fuchsia || is_mac
}

sanitizer_default_options("asan_default_options") {
  # The asan runtime includes the lsan and ubsan runtimes, which parse their
  # own options.
  deps = [
    ":lsan_default_options",
    ":ubsan_default_options",
  ]
}

sanitizer_default_options("lsan_default_options") {
}

# TODO(https://fxbug.dev/42121528): Temporary while leaks are plugged.
# As leak bugs are found, file a bug #nnnnn for the leaky test/component,
# and then add:
# ```
#   # TODO(nnnnn): Fix the leaks and remove this.
#   deps += [ "//build/config/sanitizers:suppress-lsan.DO-NOT-USE-THIS" ]
# ```
# to the target that builds the leaky code.  When all leaky tests have been
# marked that way, the asan_default_options default above will be removed.
#
# To trim this allowlist:
# scripts/gn/trim_visibility.py --target="//build/config/sanitizers:suppress-lsan.DO-NOT-USE-THIS"
sanitizer_extra_options("suppress-lsan.DO-NOT-USE-THIS") {
  visibility = [
    "//sdk/lib/driver/component/rust:*",
    "//src/cobalt/bin/system-metrics/*",
    "//src/connectivity/lib/packet-formats:*",
    "//src/devices/usb/drivers/xhci/*",
    "//src/fonts/*",
    "//src/graphics/drivers/msd-vsi-vip/tests/integration/*",
    "//src/graphics/lib/compute/*",
    "//src/graphics/lib/compute/forma/*",
    "//src/graphics/lib/compute/surpass/*",
    "//src/lib/scoped_task/*",
    "//src/media/audio/drivers/intel-hda/controller/*",
    "//src/media/codec/factory/*",
    "//src/settings/*",
    "//third_party/alacritty/alacritty_terminal/*",
    "//third_party/crashpad/src/*",
    "//vendor/*",
    "//zircon/third_party/uapp/dash/*",
  ]

  args = [ "detect_leaks=0" ]
  sanitizer = "lsan"
  tags = [ "lsan" ]
}

sanitizer_extra_options("suppress-asan-stack-use-after-return") {
  visibility = [
    # These tests need to check actual stack behavior, not fake stack.
    "//zircon/system/ulib/c/test/sanitizer:memory-snapshot-test",
  ]

  args = [ "detect_stack_use_after_return=0" ]
  sanitizer = "asan"
  tags = [ "asan" ]
}

# Disable the container overflow detection, which will create false positives
# if a part of the application is built with asan and another part is not. See
# https://github.com/google/sanitizers/wiki/AddressSanitizerContainerOverflow.
sanitizer_extra_options("suppress-asan-container-overflow") {
  visibility = [
    "//sdk/lib/component/outgoing/cpp:*",
    "//sdk/lib/sys/component/cpp/testing:*",
    "//src/lib/llvm:*",
  ]

  args = [ "detect_container_overflow=0" ]
  sanitizer = "asan"
  tags = [ "asan" ]
}

# Disable new-delete-type-mismatch checks.
# TODO(https://fxbug.dev/357662201): THERE SHOULD BE NO NEW USERS OF THIS! This
# particular check is not known to have any kind of false-positives and should
# remain on unconditionally. This is only here to unblock the clang roll and
# all instances of this should be investigated and fixed after the roll. Once
# that's done, we can remove this.
sanitizer_extra_options(
    "suppress-asan-new-delete-type-mismatch.DO-NOT-USE-THIS") {
  visibility = [ "//src/devices/tpm/drivers/tpm:tpm-driver-test-bin" ]

  args = [ "new_delete_type_mismatch=0" ]
  tags = [ "asan" ]
  sanitizer = "asan"
}

config("no_sanitizers") {
  cflags = [ "-fno-sanitize=all" ]
  if (!is_gcc) {
    cflags += [ "-fsanitize-coverage=0" ]
  }
  configs = [ "//build/config:no-stack-protector" ]
}

# rustc flags for AddressSanitizer, primarily used for fuzzing Rust code.
# TODO(https://fxbug.dev/42121590): This is technically wrong; it will use clang's ASan.
# rustc is built from a different fork of LLVM and should use a matching ASan.
# However, Fuchsia's libc and dynamic linker cooperate to set up the shadow
# memory and currently always link against clang's ASan. Using both rustc and
# clang's ASan would also be infeasible, as symbol names and shadow memory
# regions would conflict.
#
# Thus, variants using this config currently IGNORE the potential ABI
# incompatibility and simply use clang's ASan. If/when this breaks, these
# test-only variants should be disabled until a resolution can be found.
#
# Additionally, variants using this config CANNOT be used on binaries linked
# by rustc, as it will fail to find its runtime. It CAN be used to build
# libraries with rustc that are then linked into executables by clang, e.g.
# fuzzers.
variant("rust-asan") {
  rustflags = [ "-Zsanitizer=address" ]
  executable_deps = [ ":asan_default_options" ]
}

# TODO(https://fxbug.dev/42120045): Building with this variant alone can still lead to
# some build errors, but this is still needed for lsan tests (see
# //zircon/system/ulib/c/test/sanitizer:lsan-test).
variant("lsan") {
  ldflags = [ "-fsanitize=leak" ]

  # LSan wants frame pointers because it captures stack traces
  # on allocations and such, not just on errors.
  configs = [ "//build/config:frame_pointers" ]

  if (is_fuchsia || is_mistos) {
    # The LSan runtime is statically linked but depends on libzircon.
    libs = [ "zircon" ]
  }

  executable_deps = [ ":lsan_default_options" ]
}

variant("ubsan") {
  common_flags = []
  configs = []
  if (!_prebuilt_runtime) {
    # If not using the prebuilt runtime, then enable options appropriate for a
    # custom runtime.  There are no deps injected to get the custom runtime
    # because how it's defined depends on the particular environment.
    configs += [ "//src/lib/ubsan-custom:ubsan" ]
  } else {
    common_flags = [ "-fsanitize=undefined" ]
  }

  if (is_host) {
    # TODO(https://fxbug.dev/42138627): remove this once LLVM prebuilts have variants
    # Disable vptr checks on host binaries.
    # This is a temporary hack around the facts that:
    # 1) UBSan's vptr check requires RTTI, and mixing RTTI and no-RTTI TUs in
    #    the same binary leads to spurious UBSan failures
    # 2) we have non-variant prebuilts for LLVM, which lack RTTI
    # 3) we have binaries that depend on both these LLVM prebuilts and other libraries
    # Disabling this check on host tools for now allows us to enable UBSan on
    # host tools, which is a net win.
    common_flags += [ "-fno-sanitize=vptr" ]
  }

  # If asan is also in use, it handles ubsan_default_options indirectly.
  # It also includes the ubsan runtime and plumbing for it.
  if (_prebuilt_runtime && toolchain_variant.tags + [ "asan" ] - [ "asan" ] ==
                           toolchain_variant.tags) {
    executable_deps = [ ":ubsan_default_options" ]
    configs += [
      ":variant-libprefix",
      ":ubsan.rustflags",
    ]
  }
}

sanitizer_rustflags("ubsan.rustflags") {
  variant = "ubsan"
  shared_runtime = is_fuchsia || is_mac
}

sanitizer_default_options("ubsan_default_options") {
}

variant("sancov") {
  common_flags = [ "-fsanitize-coverage=trace-pc-guard" ]
}

variant("tsan") {
  common_flags = [ "-fsanitize=thread" ]
  configs = [
    ":variant-libprefix",
    ":tsan.rustflags",
  ]
}

sanitizer_rustflags("tsan.rustflags") {
  variant = "tsan"
  shared_runtime = false
}

sanitizer_default_options("tsan_default_options") {
}

variant("hwasan") {
  common_flags = [ "-fsanitize=hwaddress" ]
  configs = [
    ":variant-libprefix",
    ":hwasan.rustflags",
  ]
  executable_deps = [ ":hwasan_default_options" ]
}

sanitizer_rustflags("hwasan.rustflags") {
  variant = "hwasan"
  shared_runtime = is_fuchsia
}

sanitizer_default_options("hwasan_default_options") {
  # The hwasan runtime includes the ubsan and lsan runtime, which parses its
  # own options.
  deps = [
    ":lsan_default_options",
    ":ubsan_default_options",
  ]
}

extra_options_for_all_sanitizers("sanitizers_use_symbolizer_markup") {
  args = [ "enable_symbolizer_markup=1" ]
}
