# Copyright 2024 Mist Tecnologia LTDA. All rights reserved.
# Copyright 2019 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//build/config/build_id.gni")
import("//build/config/clang/clang.gni")
import("//build/config/clang/crash_diagnostics.gni")
import("//build/config/compiler.gni")
import("//build/config/kernel/levels.gni")
import("//build/config/linker.gni")
import("//build/toolchain/variant.gni")

# NOTE: This file provides the GN configs used by mk toolchains
# exclusively. See //build/toolchain/mk/mk_toolchain.gni.
#
# Major differences in the rewrite:
#
#  - Uses |mk_toolchain| global variable, instead of |toolchain|.
#
#  - All code paths related to |is_host| has been removed (the Zircon toolchain
#    are never used to build host binaries).

config("compiler") {
  # Per CPU targeting policy we always target the baseline when building the
  # kernel, rather than using board_configs. This is done to reduce binary
  # diversity. See: TODO RFC LINK HERE
  configs = [ "//build/config:cpu_baseline" ]

  compiler_flags = []
  cflags_cc = []
  defines = []
  ldflags = []

  # NOTE: This config should only be used with mk-specific toolchains
  # but this BUILD.gn file is also included from non-mk ones. To
  # avoid un-necessary GN errors, define a fake local mk_toolchain
  # scope to ensure this config() definitions executes properly even if
  # it is never used.
  if (kernel_toolchain == false) {
    kernel_toolchain = {
      target_tuple = ""
      version_string = ""
      include_dirs_cc = []
      lib_dirs = []
    }
  }

  # For GCC, the compiler command implies the target.
  # For Clang, there's a single compiler command that takes `--target`.
  if (!is_gcc) {
    compiler_flags += [ "--target=${kernel_toolchain.target_tuple}" ]
  }

  if (linker != "") {
    ldflags += [ "-fuse-ld=$linker" ]
  }

  if (defined(kernel_toolchain.version_string) &&
      kernel_toolchain.version_string != "") {
    # Nothing uses this define, but its presence on compilation command
    # lines ensures that Ninja will rebuild things when a new compiler
    # version arrives.
    defines += [ "TOOLCHAIN_VERSION=${kernel_toolchain.version_string}" ]
  }

  # This is the default already on Fuchsia and maybe others, but never hurts.
  cflags = [ "-fno-common" ]

  configs += [
    "//build/config:color_diagnostics",
    "//build/config:crash_diagnostics",
    "//build/config:stack-size-section",

    # TODO: "$current_os:compiler",
  ]
  if (!is_gcc) {
    configs += [
      "//build/config:clang_defaults",
      "//build/config:embed_bitcode",
    ]
  }

  if (is_gcc) {
    # This is predefined by Clang but not by GCC.
    if (current_cpu == "arm64") {
      defines += [ "__ARM_ACLE=202420" ]
    } else if (current_cpu == "arm") {
      defines += [ "__ARM_ACLE=200" ]
    }
  }

  if (is_mk) {
    # ld.bfd doesn't support -z relro for the targets we use it for.
    if (!is_gcc || linker == "gold") {
      ldflags += [ "-Wl,-z,relro" ]
    }

    if (is_gcc) {
      # This is predefined by Clang --target=*-fuchsia.
      # But the GCC toolchain is the generic --target=*-elf one.
      defines += [ "__Fuchsia__" ]

      # These are done by default in the Clang toolchain.
      cflags += [ "-fasynchronous-unwind-tables" ]
      ldflags += [
        "-Wl,--build-id",
        "-Wl,--hash-style=gnu",
        "-Wl,-z,now",
        "-Wl,-z,combreloc",
        "-Wl,-z,text",
      ]

      if (!is_kernel) {
        ldflags += [ "-Wl,--eh-frame-hdr" ]
      }

      if (linker == "" || linker == "bfd") {
        # This is the default in both LLD and Gold, but not in BFD.
        # However, Gold doesn't even have the switch.
        ldflags += [ "-Wl,-z,separate-code" ]
      }

      # This is the default in LLD, available in BFD, but not in Gold.
      if (linker == "bfd") {
        ldflags += [ "-Wl,-z,pack-relative-relocs" ]
      }

      # In the Clang toolchain assembly files with no explicit marker don't
      # cause the presumption of executable stack as they do in GCC.
      ldflags += [ "-Wl,-z,noexecstack" ]

      if (current_cpu == "arm64") {
        # x18 is reserved in the Fuchsia ABI so it can be used
        # for things like -fsanitize=shadow-call-stack.
        cflags += [ "-ffixed-x18" ]
      } else if (current_cpu == "x64") {
        # GCC will overalign data by default, but there's no need for that.
        cflags += [ "-malign-data=abi" ]
      }
    } else {
      # gcc defaults to enabling sized deallocation >= c++14; clang does not.
      # Enable sized-deallocation for the kernel, so the heap implementation
      # can optimize for or check generated sizes.
      cflags += [ "-fsized-deallocation" ]
    }
  } else if (current_os == "win") {
    # This avoids timestamps in PE-COFF relocatable (.o) files.  When using
    # clang-cl, it can also be spelled `/Brepro` as the linker option is.
    # But for the normal clang(++) driver, stick to the `-` option syntax.
    # The driver passes the corresponding option on to the linker as well,
    # where it enables build ID-like PDB UUIDs without timestamp.
    compiler_flags += [ "-mno-incremental-linker-compatible" ]
  }

  # The toolchain-supplied headers come after include_dirs from targets and
  # configs but before libc.
  foreach(dir, kernel_toolchain.include_dirs_cc) {
    cflags_cc += [
      "-isystem",
      rebase_path(dir, root_build_dir),
    ]
  }

  lib_dirs = kernel_toolchain.lib_dirs

  asmflags = compiler_flags
  cflags += compiler_flags
  ldflags += compiler_flags

  if (is_mk && build_id_format != "") {
    ldflags += [ "-Wl,--build-id=$build_id_format" ]
  }
}

config("nolibc") {
  ldflags = [
    "-nostartfiles",
    "-nolibc",
  ]

  # Don't use -nostdlib, because the builtins (or libgcc) are what we want
  # and are otherwise annoying to find and specify.  It's just the -lc that
  # we really want to defeat, and that's handled by giving a -L that will
  # find exactly nothing but a stub libc.so.  Clang has -nolibc to kill
  # the -lc, but for C++ it still uses -lm under -nolibc.  So this is still
  # needed to make -lm into a stub.
  # This doesn't use lib_dirs because that propagates across linking targets to
  # e.g. affect an executable() linked with a shared_library() that uses this
  # config. Since ldflags does not propagate that way, this uses explicitly the
  # -L switch that lib_dirs would expand to.
  ldflags += [ "-L" + rebase_path("libc-stub", root_build_dir) ]
}

config("data_sections") {
  cflags = [ "-fdata-sections" ]
  ldflags = cflags
}

# The 'default_assert_level' will point to one of the assert_level_<n> values
# below. This allows targets or toolchains to opt out from the default and
# select a specific value.

foreach(level,
        [
          0,
          1,
          2,
        ]) {
  variant("assert_level_$level") {
    defines = [ "ZX_ASSERT_LEVEL=$level" ]
    if (level == 0) {
      defines += [ "NDEBUG" ]
    }
  }
}

variant("default_assert_level") {
  assert(
      mk_assert_level >= 0 && mk_assert_level <= 2,
      "Invalid mk_assert_level value '$mk_assert_level', valid values are 0, 1 or 2")
  configs = [ ":assert_level_$mk_assert_level" ]
}

# This is separate from default_optimize so it can be removed.
config("default_icf") {
  if (optimize != "none" && optimize != "debug") {
    # Our code should never rely on C's unique function pointer semantics,
    # which is broken by --icf=all for sometimes substantial space savings.
    configs = [ "//build/config:icf" ]
  }
}

config("no_threadsafe_statics") {
  cflags_cc = [ "-fno-threadsafe-statics" ]
  cflags_objcc = cflags_cc
}

config("default_include_dirs") {
  include_dirs = [ "//mk/top/include" ]
}

config("no_fuzzer") {
  if (!is_gcc) {
    cflags = [ "-fno-sanitize=fuzzer" ]
  }
}

# TODO(https://fxbug.dev/42101776) Remove this once the warning with fit::variant is addressed.
config("no_maybe_uninitialized") {
  if (is_gcc) {
    cflags = [ "-Wno-maybe-uninitialized" ]
  }
}

config("machine") {
  if (is_mk && is_gcc) {
    # TODO(https://fxbug.dev/42107211): Really need to get this nailed down once and for all
    # and set by default in the compiler driver (Clang at least).
    ldflags = [ "-Wl,-z,max-page-size=4096" ]
  }
}

variant("user") {
  defines = [ "_ALL_SOURCE" ]
  configs = [ ":nolibc" ]
  deps = [ "//zircon/system/ulib/c/include:headers" ]

  if (is_gcc) {
    # This is the default in Clang for Fuchsia targets.  In shlib toolchains
    # this config will come before the one that overrides it with -fPIC.
    common_flags = [ "-fPIE" ]
  }
}

variant("user-link") {
  if (is_gcc) {
    # Include this in every final link.  This doesn't just use libs because
    # that propagates implicitly from every kind of target.  But, it needs to
    # be possible to remove the user-link config from just the linking target
    # itself to avoid this going into the link (e.g. for relocatable links).
    # ldflags doesn't propagate like libs does, so this way it only applies
    # when this config is on the configs list of the actual linking target.
    # The compiler driver and linker don't care where the input linker script
    # appears on the link command line, so that is fine.  However, it requires
    # also plumbing inputs to make sure GN knows the file is being used and
    # emits Ninja file deps as it would implicitly for libs.
    inputs = [ "dso_handle.ld" ]
    ldflags = rebase_path(inputs, root_build_dir)
  }
}

variant("user-executable") {
  # This prevents the default dynamic linker from being embedded.  Other deps
  # can still set PT_INTERP either via link inputs with a `.interp` section, or
  # ldflags that come later with an explicit `-Wl,-dynamic-linker=...`.
  ldflags = [ "-Wl,--no-dynamic-linker" ]
  if (is_gcc) {
    # This is already the default in Clang for Fuchsia targets.
    ldflags += [ "-pie" ]

    # Gold doesn't handle --no-dynamic-linker and won't produce a PIE without a
    # PT_INTERP.
    ldflags += [ "-fuse-ld=bfd" ]
  }

  # crt1 and libc will come via explicit link dependencies if at all.
  ldflags += [
    "-nostartfiles",
    "-nolibc",
  ]
}

config("integer-paranoia") {
  cflags = [
    "-fsanitize=integer-divide-by-zero,signed-integer-overflow",
    "-fsanitize-undefined-trap-on-error",
  ]
}

config("static-libc++") {
  if (current_os == "mac") {
    # The macOS driver doesn't support -static-libstdc++ properly, so pass
    # the libraries directly.  This has to locate the files explicitly in
    # the toolchain, because -lc++ would look for the shared library.
    ldflags = [
      "-nostdlib++",

      # NOTE: the path below was relative to toolchain.tool_dir in the Zircon build
      # but the Fuchsia one doesn't support GCC-based host builds at all, so this
      # is assuming Clang is always used instead.
      "${rebased_clang_dir}/lib/libc++.a",
    ]
  } else {
    ldflags = [ "-static-libstdc++" ]

    # TODO(https://fxbug.dev/42101309): The implicitly linked static libc++.a depends on these.
    if (current_os == "linux") {
      libs = [
        "dl",
        "pthread",
      ]
    }
  }
  if (is_kernel || toolchain_variant.tags + [ "no-compiler-abi" ] -
                   [ "no-compiler-abi" ] != toolchain_variant.tags) {
    # This directory contains just a libc++.a file that is a stub input linker
    # script to prevent the real libc++.a from being found by the linker.
    # Instead, it will find the empty file and any references to symbols
    # defined in the real libc++.a (which includes libc++abi) will cause the
    # link to fail.  This doesn't use lib_dirs because it propagates in ways
    # that ldflags doesn't.  It also ensures the stub is first in the path,
    # since any -L switches from lib_dirs directories come after ldflags.
    ldflags += [ "-L" + rebase_path("libc++-stub", root_build_dir) ]
  }
}

# This config is used for code that needs to be purely position-independent
# without using dynamic relocation.  Since the compiler doesn't generally make
# guarantees about this, it's sometimes necessary to disable specific optimizations
# to ensure the code with this requirement doesn't get compiled in ways that won't
# work.  This config can be changed to add switches when those needs arise.
config("pure") {
  # TODO(https://fxbug.dev/42076005): This disables the SwitchToLookupTable optimization,
  # which is not PIC-friendly under LTO.
  if (toolchain_variant.is_pic_default &&
      (optimize == "size_lto" || toolchain_variant.tags + [ "lto" ] -
                                 [ "lto" ] != toolchain_variant.tags)) {
    cflags = [ "-fno-jump-tables" ]
  }
}

variant("rodso") {
  configs = [ ":pure" ]
  if (is_gcc) {
    inputs = [ "rodso.ld" ]
    ldflags = [ "-Wl,-T," + rebase_path(inputs[0], root_build_dir) ]
  }
}

# This has to be variant() rather than config() to be used in the toolchain
# configs list.
variant("tiny") {
  cflags = [ "-mcmodel=tiny" ]
  asmflags = cflags
  ldflags = cflags
}

# Statically linked posititon independent executable.
#
# These have to be variant() rather than config() to be used in the toolchain
# configs list.
variant("static-pie-compile") {
  cflags = [ "-fPIE" ]
}

variant("static-pie-link") {
  ldflags = [
    "-Wl,-pie",
    "-Wl,--no-dynamic-linker",
  ]
}

# Disallow C++ static initializers in functions that require runtime init.
config("forbid-guard-variables") {
  if (!is_gcc) {
    cflags_cc = [
      "-Xclang",
      "-fforbid-guard-variables",
    ]
  }
}

# This is used by hermetic_code_blob() in hermetic_code_blob.gni.
config("hermetic-code-blob") {
  inputs = [ "hermetic-code-blob.ld" ]

  # Use a custom linker script rather than the default PIE layout.
  ldflags = [ "-Wl,-T," + rebase_path(inputs[0], root_build_dir) ]

  # lld defaults to PIE, while the GNU linkers do not.
  if (!is_gcc) {
    ldflags += [ "-Wl,--no-pie" ]
  }

  # Don't add any additional sections or dependencies.
  configs = [ ":no-synthetic-sections" ]
  if (!is_kernel) {
    ldflags += [
      "-static",
      "-nostartfiles",
    ]
    if (is_gcc) {
      ldflags += [ "-nostdlib" ]
    } else {
      # Note this can still link in builtins, which is generally OK for user
      # code (even the basic machine ABI), but not for kernel code that has its
      # own ABI requirements.
      ldflags += [
        "-nolibc",
        "-nostdlib++",
        "-unwindlib=none",
      ]
    }
  }
}

config("no-synthetic-sections") {
  # These may be necessary to override earlier explicit switches passed by
  # //build/config:compiler and its dependencies, e.g. when using -r.
  ldflags = [
    "-Wl,--build-id=none",  # Don't generate .note.gnu.build-id section.
    "-Wl,--no-eh-frame-hdr",  # Don't generate .eh_frame_hdr section.
  ]
  if (linker != "gold") {
    ldflags += [
      "-Wl,--no-dynamic-linker",  # Don't generate .interp section.
    ]
  }
}

# This is used by the basic_executable() for an hermetic partial link step.
config("hermetic_source_set.config") {
  # The partial link with --gc-sections will drop some sections that should
  # survive (while not directly referenced) into the outer link to be
  # implicitly referenced later, e.g. via a generated .eh_frame_hdr.
  inputs = [ "//build/toolchain/hermetic_source_set.ld" ]
  ldflags = [
    "-r",
    "-static",
    "-Wl,-T," + rebase_path(inputs[0], root_build_dir),
  ]
}
