# Copyright 2025 Mist Tecnologia LTDA
# Copyright 2019 The Fuchsia Authors
#
# Use of this source code is governed by a MIT-style
# license that can be found in the LICENSE file or at
# https://opensource.org/licenses/MIT

import("//build/config/kernel/standard.gni")
import("//build/kernel/c_utils.gni")
import("//build/kernel/kernel_cpu.gni")
import("//build/toolchain/kernel/kernel_toolchain_suite.gni")
import("//build/toolchain/variant.gni")
import("params.gni")

declare_args() {
  # A list of GN labels comprising additional dependencies of the kernel
  # proper. This can be useful - in a prototyping or 'vendor' capacity - for
  # injecting new instances of subsystems that the kernel has defined modularly
  # (e.g., pdev drivers or k commands).
  kernel_extra_deps = []
}

if (current_toolchain == default_toolchain) {
  # In the default toolchain, just define the kernel toolchains.
  foreach(cpu, standard_mk_cpus) {
    kernel_toolchain_suite("kernel_$cpu") {
      cpu = cpu
      os = "mk"

      environment = "kernel"

      if (cpu == "x64") {
        _kernel_cpu = "x86"
      } else {
        _kernel_cpu = cpu
      }

      toolchain_tags = [
        "kernel",
        "no-floating-point",
        "standalone",
      ]

      prefix_configs = [
        "//mk:headers",

        # TODO(https://fxbug.dev/42121444): Many include/ headers use <ktl/*.h> headers.
        "//mk/lib/ktl:headers.config",
        "//mk/lib/fit:headers.config",
        "//mk/lib/stdcompat:headers.config",

        # <stdio.h> has #include <lib/io.h>.
        "//mk/lib/io:headers.config",

        # <stdlib.h> has #include <lib/heap.h>.
        "//mk/lib/heap:headers.config",

        # <lib/lockup_detector.h> is included by some "low-level" headers.
        #"//mk/lib/lockup_detector:headers.config",

        # <kernel/percpu.h> has #include <lib/lazy_init/lazy_init.h>.
        #"//mk/ulib/lazy_init:headers.config",

        # <kernel/spinlock.h> has #include <lockdep/lock_policy.h>.
        #"//mk/ulib/lockdep:headers.config",

        # <kernel/{scheduler.h,scheduler_state.h> has #include <ffl/fixed.h>.
        #"//mk/ulib/ffl:headers.config",

        # <kernel/thread.h> has #include <lib/kconcurrent/*.h>.
        #"//mk/lib/kconcurrent:headers.config",
        #"//mk/ulib/concurrent:headers.config",

        # <kernel/thread.h> has #include <vm/kstack.h>.
        "//mk/kernel/vm:headers.config",

        # <vm/page.h> has #include <vm/phys/arena.h>
        #"//zircon/kernel/vm/phys:headers.config",

        # <vm/vm_object.h> has #include <lib/user_copy/user_ptr.h>.
        #"//zircon/kernel/lib/user_copy:headers.config",

        # <vm/pmm_checker.h> has #include <lib/boot-options/boot-options.h>.
        #"//mk/lib/acpi_lite:headers.config",
        #"//mk/lib/boot-options:headers.config",
        #"//mk/lib/devicetree:headers.config",
        #"//mk/ulib/uart:headers.config",
        # "//mk/ulib/hwreg:headers.config",

        # <vm/phys/arena.h> has #include <lib/memalloc/range.h>
        #"//zircon/kernel/phys/lib/memalloc:range.headers.config",

        # <lib/ktrace.h> has #include <lib/zircon-internal/ktrace.h>.
        #"//zircon/system/ulib/zircon-internal:headers.config",

        # <lib/ktrace.h> has #include <lib/ktrace/string_ref.h>.
        #"//zircon/kernel/lib/ktrace:headers.config",
        #"//zircon/kernel/lib/ktrace:suppress-warning.config",
        "//mk/lib/special-sections:headers.config",
        "//mk/lib/fxt:headers.config",

        # <kernel/thread.h> has #include <fbl/macros.h>
        #"//zircon/system/ulib/fbl:headers.config",

        # <dev/iommu.h> has #include <fbl/name.h>
        #"//zircon/kernel/lib/fbl:headers.config",

        # <reg.h> has #include <lib/mmio-ptr/mmio-ptr.h>.
        #"//zircon/system/ulib/mmio-ptr:headers.config",

        # Everywhere has #include <lib/fit/result.h>
        # Everywhere has #include <zx/result.h>
        #"//zircon/system/ulib/zx:headers.config",

        #"//zircon/kernel/lib/backtrace:headers.config",

        #"//zircon/kernel/lib/version:headers.config",

        #"//zircon/kernel/lib/wake-vector:headers.config",

        # <platform.h> has #include <lib/arch/ticks.h>.
        #"//mk/lib/arch/$_kernel_cpu:headers.config",
        #"//zircon/kernel/lib/arch:common-headers.config",

        # Many headers have #include <lib/zbi-format/zbi.h>.
        #"//sdk/lib/zbi-format:include",

        # <kernel/scheduler.h> depends on <lib/power-management/power-state.h>
        #"//zircon/kernel/lib/power-management:headers.config",

        # <kernel/scheduler.h> depends on <lib/stall.h>
        #"//zircon/kernel/lib/stall:headers.config",
      ]

      configs = [ "//mk:kernel_config" ]

      # NOTE: kernel artifacts currently do not build under fuzzer
      # variants. This was also true with the Zircon build, but
      # the Fuchsia build never invoked it with corresponding
      # variant selectors. Using an exclude_variant_tag is
      # enough to fix the issue.
      exclude_variant_tags = [ "fuzzer" ]
      if (cpu == "riscv64") {
        # TODO(https://fxbug.dev/42076027): no asan for riscv64 yet
        exclude_variant_tags += [ "asan" ]
      } else if (cpu == "arm64") {
        # TODO(https://fxbug.dev/379891035): arm64 KASan support was
        # temporarily removed and is to be reimplemeted.
        exclude_variant_tags += [ "asan" ]
      }

      # Always enable frame pointers in the kernel so there are panic
      # backtraces and such.
      # TODO(mcgrathr): Consider either removing this so there's a
      # no-frame-pointers option, or removing the kernel's support for
      # !WITH_FRAME_POINTERS if it will never be used.
      remove_common_configs = [ "//build/config:default_frame_pointers" ]
      configs += [ "//build/config:frame_pointers" ]

      if (cpu == "x64") {
        # TODO(https://fxbug.dev/42101838): x86 kernel can't be built without --gc-sections
        # because of crufty acpica code, and some compiler instrumentation
        # is broken wrt --gc-sections semantics.
        # Ensure that linker GC is enabled.
        configs += [ "//build/config:linker_gc" ]
      }

      # As a special case, kernel assertions are controlled by the kernel_debug_level
      # variable, and not zx_assert_level (though it defaults to the same value, but
      # some product configurations may decide to change it).
      remove_common_configs += [ "//build/config/kernel:default_assert_level" ]

      # Map kernel_debug_level above 2 to an assert_level of 2, as that is the
      # highest valid assertion level.
      if (kernel_debug_level > 2) {
        kernel_assert_level = 2
      } else {
        kernel_assert_level = kernel_debug_level
      }
      configs += [ "//build/config/kernel:assert_level_$kernel_assert_level" ]

      # TODO(https://fxbug.dev/42150661): the kernel crashes on boot if built with -O0.
      _optimize_none = [ "//build/config:optimize_none" ]
      if (configs + _optimize_none - _optimize_none != configs) {
        configs -= _optimize_none
        configs += [ "//build/config:optimize_debug" ]
      }
    }
  }
}

# For any standalone static binary.
config("standalone") {
  ldflags = [
    "-nostdlib",
    "-static",
  ]

  cflags = [
    "-ffreestanding",
    "-include",
    rebase_path("include/hidden.h", root_build_dir),

    # We want `.debug_frame` for the kernel (https://fxbug.dev/42104841).  And we still want
    # asynchronous unwind tables.  Alas there's (currently) no way to
    # achieve this with our GCC.  At the moment we compile with
    # `-fno-omit-frame-pointer`, which is good because we link with
    # `--gc-sections`, which means `.eh_frame` gets discarded so GCC-built
    # kernels don't have any unwind info (except for assembly)!
    "-fno-unwind-tables",
  ]

  # Always feed assembler code the `.cfi_sections` directive to
  # populate only `.debug_frame` and not `.eh_frame`.
  asmflags = [
    "-include",
    rebase_path("debug-frame.S", root_build_dir),
  ]

  cflags_cc = [
    # Underlying kernel heap only has default alignment of 8 bytes, so pass
    # this to the compiler as the default new alignment.
    "-faligned-new=8",
  ]

  if (current_os != "win") {
    if (current_cpu == "x64") {
      # This only matters in an environment where interrupt handlers might
      # push trap frames in the same privilege level, like the kernel.
      # e.g. Multiboot probably doesn't actually need it, but it doesn't hurt.
      cflags += [ "-mno-red-zone" ]
    } else if (current_cpu == "arm64") {
      # This matters if vector registers are not available, e.g. in the kernel
      # since the they hold unsaved user state, or in the physmem environment
      # because they might not be enabled in hardware yet.
      cflags += [ "-mgeneral-regs-only" ]
    }
  }

  if (is_gcc && current_os == "mk") {
    #cflags += [ "-fpie" ]
  }

  if (!is_gcc && current_os == "mk") {
    # In the Fuchsia-target toolchains there's no way to prevent the
    # compiler driver from passing -pie, so negate it.  BFD ld doesn't
    # have --no-pie, but arm64-elf-gcc doesn't pass -pie either.
    ldflags += [ "-Wl,--no-pie" ]
  }

  configs = [ "//build/config:no_exceptions" ]
}

if (is_kernel) {
  # These are needed both in kernel sources (pervasively) and in the linker
  # scripts.
  kernel_defines = [
    "IS_64BIT=1",
    "MEMBASE=0",
    "X86_LEGACY=0",

    "KERNEL_BASE=0xffffffff80000000",
    "KERNEL_LOAD_OFFSET=0x00200000",
    "KERNEL_ASPACE_BASE=0xffffff8000000000",
    "KERNEL_ASPACE_SIZE=0x0000008000000000",
    "USER_ASPACE_BASE=0x0000000000000000",
    "USER_ASPACE_SIZE=0x0000800000000000",

    "SMP_MAX_CPUS=1",
    "ARCH_HAS_MMU=1",
  ]

  config("instrumented-stack-size") {
    # Note: Using this extra variable to capture whether the stack size should
    # be increased or not, is due to GN's limitation on treating unevaluated parts
    # of an expression as unused (e.g. a || b, would flag `b` as unused if `a` is true).
    increase_stack_size = false

    # Lockdep enabled.
    if (enable_lock_dep || enable_lock_dep_metadata_only ||
        scheduler_lock_spin_tracing_enabled || lock_tracing_enabled) {
      increase_stack_size = true
    }

    # Variant considered instrumentation.
    if (toolchain_variant.tags + [ "instrumented" ] - [ "instrumented" ] !=
        toolchain_variant.tags) {
      increase_stack_size = true
    }
    if (increase_stack_size) {
      defines = [ "CUSTOM_DEFAULT_STACK_SIZE=16384" ]
    }
  }

  # This is the top config for all kernel code.
  variant("kernel_config") {
    configs = [
      ":lock_dep",
      ":scheduler",
      ":standalone",
      ":warnings",

      "arch/$kernel_cpu:abi",
      "arch/$kernel_cpu:kernel",
      "//build/config:no-finite-loops",
      "//build/config:zero-call-used-regs",

      # include/lib/counters.h and kernel.ld depend on -fdata-sections.
      "//build/config/kernel:data_sections",

      # Provides checks for maximum supported kernel sizes.
      ":kernel_image_max_size",

      # Overrides default stack size for instrumented builds.
      ":instrumented-stack-size",
    ]

    # TODO(https://fxbug.dev/42101573): This dependency is conditional because when built
    # with GCC the kernel uses function scoped statics requiring dynamic
    # initialization. Once https://fxbug.dev/42101573 is fixed, this dependency can be
    # removed.
    if (is_gcc) {
      # Don't emit extra code making static initializers thread-safe.
      configs += [ "//build/config/kernel:no_threadsafe_statics" ]
    }

    # Always enable frame pointers in the kernel so there are panic
    # backtraces and such.
    # TODO(mcgrathr): Consider either removing this so there's a
    # no-frame-pointers option, or removing the kernel's support for
    # !WITH_FRAME_POINTERS if it will never be used.
    configs += [ "//build/config:frame_pointers" ]

    # Disable stack protector and safe stack
    configs += [ "//build/config:no-stack-protector" ]
    configs += [ "//build/config:no-safe-stack" ]

    defines = kernel_defines + kernel_extra_defines
    defines += [
      "_KERNEL",
      "LK",
      "ENABLE_PANIC_SHELL",
      "ZIRCON_TOOLCHAIN",
      "LK_DEBUGLEVEL=$kernel_debug_level",
      "DEBUG_PRINT_LEVEL=$kernel_debug_print_level",

      #"VM_TRACING_LEVEL=$vm_tracing_level",
      #"FUTEX_BLOCK_TRACING_ENABLED=$futex_block_tracing_enabled",
      #"LOCK_TRACING_ENABLED=$lock_tracing_enabled",
      #"EXPERIMENTAL_THREAD_SAMPLER_ENABLED=$experimental_thread_sampler_enabled",
    ]

    #cflags = [ "-fpie" ]
  }

  config("headers") {
    include_dirs = [
      "include",
      "lib/libc/include",
    ]

    # This is in public_configs of libc:headers, so we need it explicitly here
    # to match up with the include_dirs here that replicates what a proper dep
    # on libc:headers would yield.
    configs = [ "lib/libc:headers.after" ]
  }

  config("warnings") {
    cflags = [
      "-Wformat=2",
      "-Wmissing-declarations",
      "-Wvla",
    ]

    # GCC supports `-Wformat-signedness` but Clang currently does not.
    if (is_gcc) {
      cflags += [ "-Wformat-signedness" ]
    }

    # TODO(https://fxbug.dev/42159114): Eventually enable -Wshadow for GCC.  It's currently
    # disabled because GCC is more aggressive than Clang.
    if (!is_gcc) {
      cflags += [ "-Wshadow" ]
    }

    cflags_c = [ "-Wmissing-prototypes" ]
  }

  config("lock_dep") {
    visibility = [ ":*" ]
    defines = []
    if (enable_lock_dep) {
      defines += [
        "WITH_LOCK_DEP=1",
        "LOCK_DEP_ENABLED_FEATURE_LEVEL=2",
      ]
    } else if (enable_lock_dep_metadata_only ||
               scheduler_lock_spin_tracing_enabled || lock_tracing_enabled) {
      defines += [
        "WITH_LOCK_DEP=1",
        "LOCK_DEP_ENABLED_FEATURE_LEVEL=1",
      ]
    }
    if (enable_lock_dep_tests) {
      defines += [ "WITH_LOCK_DEP_TESTS=1" ]
    }
  }

  config("scheduler") {
    visibility = [ ":*" ]
    defines = [
      "SCHEDULER_TRACING_LEVEL=$scheduler_tracing_level",
      "SCHEDULER_QUEUE_TRACING_ENABLED=$scheduler_queue_tracing_enabled",
      "SCHEDULER_EXTRA_INVARIANT_VALIDATION=$scheduler_extra_invariant_validation",
      "SCHEDULER_LOCK_SPIN_TRACING_COMPRESSED=$scheduler_lock_spin_tracing_compressed",
      "SCHEDULER_LOCK_SPIN_TRACING_ENABLED=$scheduler_lock_spin_tracing_enabled",
      "WAIT_QUEUE_DEPTH_TRACING_ENABLED=$wait_queue_depth_tracing_enabled",
    ]
  }

  config("persistent_ram_config") {
    visibility = [
      ":*",
      #"//mk/lib/crashlog/*",
      #"//mk/lib/jtrace/*",
      #"//mk/lib/persistent-debuglog/*",
    ]
    defines = [ "PERSISTENT_RAM_ALLOCATION_GRANULARITY=$persistent_ram_allocation_granularity" ]
  }

  # In architechtures where it is necessary, determined the number of boot pages to be preallocated
  # from BSS to map the kernel in the higher address space for enabling the MMU when booting.
  # See `start.S` of the relevant architectures for more information.
  config("kernel_image_max_size") {
    if (target_cpu == "arm64" || target_cpu == "riscv64") {
      if (toolchain_variant.tags + [ "coverage" ] - [ "coverage" ] !=
          toolchain_variant.tags) {
        # 25 MB upperbound for coverage builds.
        kernel_image_max_size = 26214400
      } else {
        # 14 MB upperbound for non coverage builds.
        kernel_image_max_size = 14680064
      }
    } else if (target_cpu == "x64") {
      # x64 hard coded to support up to 64 MB.
      kernel_image_max_size = 67108864
    }

    visibility = [
      ":*",
      #"//zircon/kernel/phys:*",
    ]
    defines = [ "KERNEL_IMAGE_MAX_SIZE=$kernel_image_max_size" ]
  }

  # This is the kernel proper, an ELF executable with full symbols.
  # It's the file to use with a debugger, for example.
  executable("kernel") {
    visibility = [ ":*" ]

    # //zircon/scripts/zircon.elf-gdb.py expects kernel symbols in "zircon.elf".
    output_name = "mk"
    output_extension = "elf"
    ldflags = [
      "-Wl,-T," + rebase_path("kernel.ld", root_build_dir),
      "-Wl,--emit-relocs",
    ]
    if (toolchain_variant.tags + [ "lto" ] - [ "lto" ] !=
        toolchain_variant.tags) {
      # (Thin)LTO linker driver overrides the PIC/PIE metadata embedded in the
      # IR and will choose the relocation model based on the output which for
      # the kernel would be static rather than PIE. We need to explicitly
      # override the relocation via linker flag.
      ldflags += [ "-Wl,-mllvm,-relocation-model=pic" ]
    }
    inputs = [ "kernel.ld" ]
    configs += [
      ":kernel_defsym",
      "//build/config/kernel:no-synthetic-sections",
    ]
    deps = [
      ":kernel-main",
      #"arch/$kernel_cpu:zbi-kernel-image",
    ]
  }

  group("kernel-main") {
    deps = [
             #":test",  # TODO: make optional, add testonly taint
             "top",
             # Ensures that //docs/gen/boot-options.md is never stale.
             #"lib/boot-options:check-markdown($default_toolchain)",
           ] + kernel_extra_deps
    if (current_cpu == "arm64") {
      deps += [ "platform/generic-arm" ]
    } else if (current_cpu == "riscv64") {
      deps += [ "platform/generic-riscv64" ]
    } else if (current_cpu == "x64") {
      deps += [ "platform/pc" ]
    }
  }

  mk_elf_rspfile = "$target_gen_dir/mk.elf.rsp"
  link_output_rspfile("mk.elf.rsp") {
    visibility = [ ":*" ]
    deps = [ ":mk.elf" ]
    outputs = [ mk_elf_rspfile ]
  }

  # See elf-kernel.ld where KERNEL_GOT_TOLERANCE is used.
  if (current_cpu == "arm64" && is_gcc) {
    # Each slot is 8 bytes.  The first two special slots are always there if
    # .got is there at all, per psABI.  GNU (BFD) ld seems to emit two more
    # unused slots with no associated relocs to explain their existence.
    got_tolerance = 32
  } else {
    got_tolerance = 0
  }

  # These are needed only in the linker script.
  linker_script_defines = [ "KERNEL_GOT_TOLERANCE=$got_tolerance" ]

  # This supplies those variables for use in linker scripts.
  config("kernel_defsym") {
    visibility = [ ":*" ]
    ldflags = []
    foreach(assignment, kernel_defines + linker_script_defines) {
      ldflags += [ "-Wl,-defsym,$assignment" ]
    }
  }

  group("test") {
    #TODO: testonly = true
    visibility = [ ":*" ]
    deps = [
      #"debugcommands",
      #"tests",
    ]
  }

  #toolchain_utils_action("validate-kernel-symbols") {
  #  visibility = [ ":*" ]
  #  outputs = [ "$target_gen_dir/$target_name.stamp" ]
  #  script = "//zircon/mk/scripts/validate-kernel-symbols.py"
  #  utils = [ "nm" ]
  #  deps = [
  #    ":mk.elf",
  #    ":mk.elf.rsp",
  #  ]
  #  sources = [ mk_elf_rspfile ]
  #  depfile = "$target_gen_dir/$target_name.d"
  #  args = rebase_path(sources + outputs + [ depfile ], root_build_dir)
  #}
  #
  ## Copy gdb extension script file needed for kernel debugging.
  #copy("gdb_extension") {
  #  visibility = [ ":*" ]
  #  sources = [ "scripts/mk.elf-gdb.py" ]
  #  outputs = [ "$root_out_dir/mk.elf-gdb.py" ]
  #}
} else {
  group("kernel") {
    public_deps = [ ":kernel(//mk:kernel_$target_cpu)" ]
  }

  group("tests") {
    testonly = true
    deps = []

    if (current_cpu == "x64") {
      deps += []
    }

    # TODO(https://fxbug.dev/42101573): This dependency is conditional because when built
    # with GCC the kernel uses function scoped statics requiring dynamic
    # initialization. Once https://fxbug.dev/42101573 is fixed, this dependency can be made
    # unconditional.
    if (!is_gcc) {
      #deps += [ "lib/cxxabi-dynamic-init/tests" ]
    }
  }
}
